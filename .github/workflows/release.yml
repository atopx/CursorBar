name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            name: cursor_bar-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: cursor_bar-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: cursor_bar-windows-x86_64.exe
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: cursor_bar-linux-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/cursor_bar artifacts/${{ matrix.name }}
        chmod +x artifacts/${{ matrix.name }}

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\cursor_bar.exe artifacts\${{ matrix.name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: artifacts/${{ matrix.name }}
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Create compressed archives for each platform
        cd artifacts
        
        # macOS x86_64
        if [ -d "cursor_bar-macos-x86_64" ]; then
          tar -czf ../release-assets/cursor_bar-macos-x86_64.tar.gz -C cursor_bar-macos-x86_64 .
        fi
        
        # macOS ARM64
        if [ -d "cursor_bar-macos-aarch64" ]; then
          tar -czf ../release-assets/cursor_bar-macos-aarch64.tar.gz -C cursor_bar-macos-aarch64 .
        fi
        
        # Windows
        if [ -d "cursor_bar-windows-x86_64.exe" ]; then
          cd cursor_bar-windows-x86_64.exe
          zip ../../release-assets/cursor_bar-windows-x86_64.zip *
          cd ..
        fi
        
        # Linux
        if [ -d "cursor_bar-linux-x86_64" ]; then
          tar -czf ../release-assets/cursor_bar-linux-x86_64.tar.gz -C cursor_bar-linux-x86_64 .
        fi
        
        cd ..
        ls -la release-assets/

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Read changelog
      id: changelog
      run: |
        # Extract changelog for current version
        VERSION="${{ steps.tag.outputs.tag }}"
        VERSION_NUM=${VERSION#v}
        
        # Read changelog content
        if [ -f "CHANGELOG.md" ]; then
          # Extract content between version headers
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION_NUM\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          
          # If changelog content is empty, use a default message
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="Release $VERSION

            ### What's New
            - Cross-platform Cursor AI usage monitoring
            - Real-time system tray integration
            - Bilingual interface (English/Chinese)
            - Configurable refresh intervals
            - Performance optimizations

            For detailed changes, see [CHANGELOG.md](https://github.com/atopx/CursorBar/blob/main/CHANGELOG.md)"
          fi
        else
          CHANGELOG_CONTENT="Release $VERSION"
        fi
        
        # Save to file for multiline content
        echo "$CHANGELOG_CONTENT" > changelog.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body_path: changelog.txt
        draft: false
        prerelease: false
        files: |
          release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check
