name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            name: cursor_bar-macos-x86_64.dmg
          - target: aarch64-apple-darwin
            os: macos-latest
            name: cursor_bar-macos-aarch64.dmg
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: cursor_bar-windows-x86_64.msi
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: cursor_bar-linux-x86_64.deb

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        sudo apt-get install -y dpkg-dev fakeroot

    - name: Install UPX (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get install -y upx-ucl

    - name: Install UPX (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install upx

    - name: Install UPX (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install upx

    - name: Install packaging tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install wixtoolset

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Compress binary with UPX (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        upx --best --lzma target/${{ matrix.target }}/release/cursor_bar

    - name: Compress binary with UPX (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        upx --best --lzma target/${{ matrix.target }}/release/cursor_bar.exe

    - name: Make packaging script executable
      if: matrix.os != 'windows-latest'
      run: chmod +x scripts/package.sh

    - name: Create package using script
      shell: bash
      run: |
        VERSION="${{ github.ref_name || github.event.inputs.tag }}"
        ./scripts/package.sh "$VERSION" "${{ matrix.target }}"

    - name: Find and upload package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-package
        path: |
          *.dmg
          *.msi
          *.deb
          *.zip
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy all package files to release assets
        find artifacts -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts -name "*.msi" -exec cp {} release-assets/ \;
        find artifacts -name "*.deb" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        
        # Rename files to include version
        VERSION="${{ github.ref_name || github.event.inputs.tag }}"
        cd release-assets
        
        # Rename files to have consistent naming
        for file in *; do
          if [[ "$file" == cursor_bar-* ]]; then
            continue  # Already has correct prefix
          fi
          # Add version if not present
          if [[ "$file" != *"$VERSION"* ]]; then
            ext="${file##*.}"
            base="${file%.*}"
            mv "$file" "${base}-${VERSION}.${ext}"
          fi
        done
        
        ls -la

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Read changelog
      id: changelog
      run: |
        # Extract changelog for current version
        VERSION="${{ steps.tag.outputs.tag }}"
        VERSION_NUM=${VERSION#v}
        
        # Read changelog content
        if [ -f "CHANGELOG.md" ]; then
          # Extract content between version headers
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION_NUM\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          
          # If changelog content is empty, use a default message
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="Release $VERSION

            ### What's New
            - Cross-platform Cursor AI usage monitoring
            - Real-time system tray integration
            - Bilingual interface (English/Chinese)
            - Configurable refresh intervals
            - Performance optimizations
            - UPX compressed binaries for smaller file size

            ### Installation
            - **macOS**: Download the .dmg file and drag CursorBar.app to Applications
            - **Windows**: Download and run the .msi installer
            - **Linux**: Download the .deb package and install with \`sudo dpkg -i cursor_bar-linux-x86_64-$VERSION.deb\`

            ### System Requirements
            - **macOS**: 10.14+ (Mojave or later)
            - **Windows**: Windows 10 or later
            - **Linux**: Ubuntu 22.04+ or equivalent (with GTK 3.0 support)

            For detailed changes, see [CHANGELOG.md](https://github.com/atopx/CursorBar/blob/main/CHANGELOG.md)"
          fi
        else
          CHANGELOG_CONTENT="Release $VERSION"
        fi
        
        # Save to file for multiline content
        echo "$CHANGELOG_CONTENT" > changelog.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body_path: changelog.txt
        draft: false
        prerelease: false
        files: |
          release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check
