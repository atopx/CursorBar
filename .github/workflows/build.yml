name: 多平台构建

on:
  push:
    tags:
      - 'v*'

jobs:
  # macOS 构建
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin
          components: rustfmt, clippy

      - name: 设置Rust缓存
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "macos-build"
          cache-on-failure: true

      - name: 构建macOS (x86_64)
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: 构建macOS (Apple Silicon)
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: 创建应用包
        run: |
          # x86_64
          APP_NAME="CursorBar-x86_64.app"
          mkdir -p "$APP_NAME/Contents/MacOS"
          mkdir -p "$APP_NAME/Contents/Resources"
          cp target/x86_64-apple-darwin/release/cursor_bar "$APP_NAME/Contents/MacOS/"
          cp icon/macos/icon.icns "$APP_NAME/Contents/Resources/AppIcon.icns"

          # 创建Info.plist
          cat > "$APP_NAME/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>cursor_bar</string>
              <key>CFBundleIdentifier</key>
              <string>com.atopx.cursorbar</string>
              <key>CFBundleName</key>
              <string>CursorBar</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon.icns</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSUIElement</key>
              <true/>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSRequiresAquaSystemAppearance</key>
              <false/>
              <key>NSAppTransportSecurity</key>
              <dict>
                  <key>NSAllowsArbitraryLoads</key>
                  <true/>
              </dict>
          </dict>
          </plist>
          EOF

          # arm64
          APP_NAME="CursorBar-arm64.app"
          mkdir -p "$APP_NAME/Contents/MacOS"
          mkdir -p "$APP_NAME/Contents/Resources"
          cp target/aarch64-apple-darwin/release/cursor_bar "$APP_NAME/Contents/MacOS/"
          cp icon/macos/icon.icns "$APP_NAME/Contents/Resources/AppIcon.icns"

          # 创建Info.plist
          cat > "$APP_NAME/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>cursor_bar</string>
              <key>CFBundleIdentifier</key>
              <string>com.atopx.cursorbar</string>
              <key>CFBundleName</key>
              <string>CursorBar</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon.icns</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSUIElement</key>
              <true/>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSRequiresAquaSystemAppearance</key>
              <false/>
              <key>NSAppTransportSecurity</key>
              <dict>
                  <key>NSAllowsArbitraryLoads</key>
                  <true/>
              </dict>
          </dict>
          </plist>
          EOF

      - name: 打包发布文件
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # x86_64
          mkdir -p dmg-temp-x86_64
          cp -R "CursorBar-x86_64.app" dmg-temp-x86_64/
          ln -s /Applications dmg-temp-x86_64/Applications
          hdiutil create -volname "CursorBar x86_64" -srcfolder dmg-temp-x86_64 -ov -format UDZO "CursorBar-macos-x86_64.dmg"

          # arm64
          mkdir -p dmg-temp-arm64
          cp -R "CursorBar-arm64.app" dmg-temp-arm64/
          ln -s /Applications dmg-temp-arm64/Applications
          hdiutil create -volname "CursorBar arm64" -srcfolder dmg-temp-arm64 -ov -format UDZO "CursorBar-macos-arm64.dmg"

      - name: 上传构建产物
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            CursorBar-macos-x86_64.dmg
            CursorBar-macos-arm64.dmg

  # Windows 构建
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 安装依赖
        run: |
          cargo install cargo-wix
          choco install -y upx
          choco install -y wixtoolset
      
      - name: 设置Rust缓存
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "windows-build"
          cache-on-failure: true

      - name: 构建Windows
        run: |
          # 构建
          cargo build --release
          
          # 只有成功构建后才运行 UPX
          if (Test-Path target\release\cursor_bar.exe) {
            upx --best --lzma target\release\cursor_bar.exe
          } else {
            echo "构建失败，无法运行 UPX"
            exit 1
          }

      - name: 安装cargo-wix
        run: cargo install cargo-wix
      
      - name: 创建Windows安装包
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 初始化 WiX 配置文件
          cargo wix init

          # 复制图标到wix目录
          copy icon\windows\icon.ico wix\

          # 构建 MSI 安装包
          cargo wix --output target\wix\CursorBar-windows.msi
          
          # 创建便携版
          New-Item -Path release-win -ItemType Directory -Force
          copy target\release\cursor_bar.exe release-win\cursor_bar.exe
          copy icon\windows\icon.ico release-win\icon.ico
          Compress-Archive -Path release-win\* -DestinationPath CursorBar-windows.zip

      - name: 上传构建产物
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            CursorBar-windows.zip
            CursorBar-windows.msi

  # Linux 构建
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev \
            dpkg-dev fakeroot upx-ucl libxdo-dev xdotool appstream

      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 设置Rust缓存
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux-build"
          cache-on-failure: true

      - name: 构建Linux
        run: |
          cargo build --release
          
          # 只有成功构建后才运行 UPX
          if [ -f "target/release/cursor_bar" ]; then
            upx --best --lzma target/release/cursor_bar
          else
            echo "构建失败，无法运行 UPX"
            exit 1
          fi

      - name: 创建Deb包
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION_NUM="${VERSION#v}"
          PACKAGE_NAME="CursorBar_${VERSION_NUM}_amd64"

          # 创建包结构
          mkdir -p "$PACKAGE_NAME/DEBIAN"
          mkdir -p "$PACKAGE_NAME/usr/bin"
          mkdir -p "$PACKAGE_NAME/usr/share/applications"
          mkdir -p "$PACKAGE_NAME/usr/share/icons/hicolor/256x256/apps"
          mkdir -p "$PACKAGE_NAME/usr/share/icons/hicolor/128x128/apps"
          mkdir -p "$PACKAGE_NAME/usr/share/icons/hicolor/64x64/apps"
          mkdir -p "$PACKAGE_NAME/usr/share/icons/hicolor/32x32/apps"
          mkdir -p "$PACKAGE_NAME/usr/share/doc/cursorbar"

          # 复制二进制文件和图标
          cp target/release/cursor_bar "$PACKAGE_NAME/usr/bin/"
          cp icon/linux/256x256.png "$PACKAGE_NAME/usr/share/icons/hicolor/256x256/apps/cursorbar.png"
          cp icon/linux/128x128.png "$PACKAGE_NAME/usr/share/icons/hicolor/128x128/apps/cursorbar.png"
          cp icon/linux/64x64.png "$PACKAGE_NAME/usr/share/icons/hicolor/64x64/apps/cursorbar.png"
          cp icon/linux/32x32.png "$PACKAGE_NAME/usr/share/icons/hicolor/32x32/apps/cursorbar.png"

          # 创建控制文件
          cat > "$PACKAGE_NAME/DEBIAN/control" << EOF
          Package: cursorbar
          Version: ${VERSION_NUM}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libgtk-3-0, libwebkit2gtk-4.0-37, libappindicator3-1, libc6, libxdo3, xdotool
          Maintainer: atopx <3940422@qq.com>
          Homepage: https://github.com/atopx/CursorBar
          Description: Real-time Cursor AI usage monitoring
           A modern, cross-platform system tray application for monitoring
           Cursor AI usage metrics in real-time.
          EOF

          # 创建desktop文件
          cat > "$PACKAGE_NAME/usr/share/applications/CursorBar.desktop" << EOF
          [Desktop Entry]
          Name=CursorBar
          Comment=Cursor AI usage monitoring
          Exec=/usr/bin/cursor_bar
          Icon=cursorbar
          Terminal=false
          Type=Application
          Categories=Utility;System;Monitor;
          StartupNotify=false
          NoDisplay=true
          X-GNOME-Autostart-enabled=true
          Keywords=cursor;ai;usage;monitor;tray;
          EOF

          # 设置权限
          chmod 755 "$PACKAGE_NAME/usr/bin/cursor_bar"
          chmod 644 "$PACKAGE_NAME/usr/share/applications/CursorBar.desktop"
          chmod 644 "$PACKAGE_NAME/usr/share/icons/hicolor/256x256/apps/cursorbar.png"
          chmod 644 "$PACKAGE_NAME/usr/share/icons/hicolor/128x128/apps/cursorbar.png"
          chmod 644 "$PACKAGE_NAME/usr/share/icons/hicolor/64x64/apps/cursorbar.png"
          chmod 644 "$PACKAGE_NAME/usr/share/icons/hicolor/32x32/apps/cursorbar.png"

          # 构建DEB包
          fakeroot dpkg-deb --build "$PACKAGE_NAME"

          # 创建AppImage
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          cp target/release/cursor_bar AppDir/usr/bin/
          cp "$PACKAGE_NAME/usr/share/applications/CursorBar.desktop" AppDir/
          cp "$PACKAGE_NAME/usr/share/applications/CursorBar.desktop" AppDir/usr/share/applications/
          cp icon/linux/256x256.png AppDir/usr/share/icons/hicolor/256x256/apps/cursorbar.png
          cp icon/linux/256x256.png AppDir/cursorbar.png

          # 创建AppRun文件
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          HERE="\$(dirname "\$(readlink -f "\${0}")")"
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          exec "\${HERE}/usr/bin/cursor_bar" "\$@"
          EOF
          chmod +x AppDir/AppRun

          # 下载AppImage工具
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

          # 创建AppImage
          ./appimagetool-x86_64.AppImage AppDir CursorBar-linux.AppImage

      - name: 上传构建产物
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            CursorBar-linux.AppImage
            CursorBar_*.deb

  # 创建发布版本
  create-release:
    needs: [build-macos, build-windows, build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4

      - name: 创建发布版本
        uses: softprops/action-gh-release@v2
        with:
          files: |
            macos-builds/CursorBar-macos-x86_64.dmg
            macos-builds/CursorBar-macos-arm64.dmg
            windows-builds/CursorBar-windows.zip
            windows-builds/CursorBar-windows.msi
            linux-builds/CursorBar-linux.AppImage
            linux-builds/*.deb
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
